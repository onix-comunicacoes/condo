/**
 * Generated by `createschema organization.OrganizationEmployee 'organization:Relationship:Organization:CASCADE; user:Relationship:User:SET_NULL; inviteCode:Text; name:Text; email:Text; phone:Text; role:Relationship:OrganizationEmployeeRole:SET_NULL; isAccepted:Checkbox; isRejected:Checkbox' --force`
 */

import { pick, get, difference } from 'lodash'

import { getClientSideSenderInfo } from '@condo/domains/common/utils/userid.utils'
import { generateReactHooks } from '@condo/domains/common/utils/codegeneration/generate.hooks'

import { OrganizationEmployee as OrganizationEmployeeGQL } from '@condo/domains/organization/gql'
import {
    OrganizationEmployee,
    OrganizationEmployeeUpdateInput,
    QueryAllOrganizationEmployeesArgs,
} from '../../../../schema'

const FIELDS = ['id', 'deletedAt', 'createdAt', 'updatedAt', 'createdBy', 'isBlocked', 'updatedBy', 'organization', 'user', 'inviteCode', 'name', 'email', 'phone', 'role', 'position', 'isAccepted', 'isRejected']
const FORM_FIELDS = ['role', 'position']
const RELATIONS = ['organization', 'user', 'role']

export interface IOrganizationEmployeeUIState extends OrganizationEmployee {
    id: string
    // TODO(codegen): write IOrganizationEmployeeUIState or extends it from
}

function convertToUIState (item: OrganizationEmployee): IOrganizationEmployeeUIState {
    if (item.dv !== 1) throw new Error('unsupported item.dv')
    return pick(item, FIELDS) as IOrganizationEmployeeUIState
}

export interface IOrganizationEmployeeFormState {
    id?: undefined
    isBlocked?: boolean
    // TODO(codegen): write IOrganizationEmployeeUIFormState or extends it from
}

function convertToUIFormState (state: IOrganizationEmployeeUIState): IOrganizationEmployeeFormState | undefined {
    if (!state) return
    const result = {}
    for (const attr of Object.keys(state)) {
        const attrId = get(state[attr], 'id')
        result[attr] = (RELATIONS.includes(attr) && state[attr]) ? attrId || state[attr] : state[attr]
    }
    return pick(result, FORM_FIELDS) as IOrganizationEmployeeFormState
}

function convertGQLItemToFormSelectState (item: OrganizationEmployee): { value: string, label: string } | undefined {
    const userOrganization = get(item, 'organization')
    if (!userOrganization) {
        return
    }

    const { name } = userOrganization

    return { value: item.id, label: name }
}

function convertToGQLInput (state: IOrganizationEmployeeFormState, obj: IOrganizationEmployeeUIState, initialState: IOrganizationEmployeeFormState): OrganizationEmployeeUpdateInput {
    const sender = getClientSideSenderInfo()
    const result = { dv: 1, sender }

    for (const attr of Object.keys(state)) {
        const attrId = get(state[attr], 'id')
        result[attr] = (RELATIONS.includes(attr) && state[attr]) ? { connect: { id: (attrId || state[attr]) } } : state[attr]
        if (RELATIONS.includes(attr)) {
            if (Array.isArray(state[attr])) {
                const newIds = map(state[attr], item => get(item, 'id') || item)
                const oldIds = map(initialState[attr], item => get(item, 'id') || item)
                const changes = {}
                const idsToConnect = difference(newIds, oldIds)
                if (idsToConnect.length > 0) {
                    changes.connect = map(idsToConnect, id => ({ id }))
                }
                const idsToDisconnect = difference(oldIds, newIds)
                if (idsToDisconnect.length > 0) {
                    changes.disconnect = map(idsToDisconnect, id => ({ id }))
                }
                if (Object.keys(changes).length > 0) {
                    result[attr] = changes
                }
            } else {
                const newAttrId = get(state[attr], 'id') || state[attr]
                const oldAttrId = get(initialState[attr], 'id') || initialState[attr]
                if (newAttrId && oldAttrId && newAttrId !== oldAttrId) {
                    result[attr] = { connect: { id: newAttrId } }
                } else if (!newAttrId) {
                    result[attr] = { disconnectAll: true }
                }
            }
        } else {
            result[attr] = state[attr]
        }
    }

    return result
}

const {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useDelete,
    useSoftDelete,
} = generateReactHooks<OrganizationEmployee, OrganizationEmployeeUpdateInput, IOrganizationEmployeeFormState, IOrganizationEmployeeUIState, QueryAllOrganizationEmployeesArgs>(OrganizationEmployeeGQL, { convertToGQLInput, convertToUIState })

export {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useDelete,
    useSoftDelete,
    convertGQLItemToFormSelectState,
    convertToGQLInput,
    convertToUIFormState,
}
