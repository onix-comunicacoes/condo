/**
 * Generated by `createservice ticket.TicketLastTimeViewedService`
 */
const dayjs = require('dayjs')
const { makeLoggedInClient } = require('@core/keystone/test.utils')
const { TicketLastTimeViewedRecord } = require('../utils/testSchema')
  
describe('TicketLastTimeViewedRecordService', () => {
    beforeEach(async () => {
        const client = await makeLoggedInClient()
        await TicketLastTimeViewedRecord.update(client, client.user.id, { id: client.user.id, lastTimeViewed: new Date().toISOString() })
    })

    test('set ticket last time viewed', async () => {
        const client = await makeLoggedInClient()
        const start = dayjs().toISOString()
        console.log(client.user.id)
        await TicketLastTimeViewedRecord.update(client, client.user.id, { id: client.user.id, lastTimeViewed: start })
        const [{ id, lastTimeViewed }] = await TicketLastTimeViewedRecord.getAll(client, { id: client.user.id })
        expect(id).toEqual(client.user.id)
        expect(lastTimeViewed).toEqual(start)
    })
 
    const invalidUnixTimes = ['', '0.003', 'hello']
    test.each(invalidUnixTimes)('Not setting invalid date', async (invalidUnixTime) => {
        const client = await makeLoggedInClient()
        const { errors } = await TicketLastTimeViewedRecord.update(client, client.user.id, { id: client.user.id, lastTimeViewed: invalidUnixTime }, { raw: true })
        expect(errors[0].message).toBe('Wrong date')
    })
    // TODO: add security tests
})