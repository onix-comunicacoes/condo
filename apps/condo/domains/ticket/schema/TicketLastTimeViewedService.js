/**
 * Generated by `createservice ticket.TicketLastTimeViewedService`
 */

const { GQLCustomSchema } = require('@core/keystone/schema')
const access = require('@condo/domains/ticket/access/TicketLastTimeViewedService')
const REDIS_URL = require('@core/config').REDIS_URL
const IORedis = require('ioredis')
const { get } = require('lodash')
const { isValidDate } = require('@core/keystone/plugins/utils')

const store = new IORedis(REDIS_URL)
const TICKET_LAST_TIME_VIEWED_BY_USER_PREFIX = 'ticketLastTimeViewedByUser-'
const getDSKey = (id) => TICKET_LAST_TIME_VIEWED_BY_USER_PREFIX + id

// Types
const TicketLastTimeViewedType = 'type TicketLastTimeViewed { id: ID!, lastTimeViewed: String! }'
const TicketLastTimeViewedCreateInput = 'input TicketLastTimeViewedCreateInput { dv: Int, sender: SenderFieldInput, id: ID!, lastTimeViewed: String! }'
const TicketLastTimeViewedUpdateInput = 'input TicketLastTimeViewedUpdateInput { dv: Int, sender: SenderFieldInput, id: ID!, lastTimeViewed: String! }'
const TicketLastTimeViewedWhereInput = `
input TicketLastTimeViewedWhereInput {
     id: ID!, 
     lastTimeViewed: String! 
     AND: [TicketLastTimeViewedWhereInput]
     OR: [TicketLastTimeViewedWhereInput]
     dv: Int
     dv_not: Int
     dv_lt: Int
     dv_lte: Int
     dv_gt: Int
     dv_gte: Int
     dv_in: [Int]
     dv_not_in: [Int]
     sender: SenderFieldInput
     sender_not: SenderFieldInput
     sender_in: [SenderFieldInput]
     sender_not_in: [SenderFieldInput]
}`
const SortTicketsLastTimeViewedByEnum = `
enum SortTicketsLastTimeViewedBy {
    dv_ASC
    dv_DESC
    lastTimeViewed_ASC
    lastTimeViewed_DESC
}`

// Queries and mutations
const allTicketsLastTimeViewedQuery = `
allTicketsLastTimeViewed(
    where: TicketLastTimeViewedWhereInput
    search: String
    sortBy: [SortTicketsLastTimeViewedBy!]
    orderBy: String
    first: Int
    skip: Int): [TicketLastTimeViewed]`
const updateTicketLastTimeViewedMutation = 'updateTicketLastTimeViewed(id: ID!, data: TicketLastTimeViewedUpdateInput): TicketLastTimeViewed'
const deleteTicketLastTimeViewedMutation = 'deleteTicketLastTimeViewed(id: ID!): TicketLastTimeViewed'

const TicketLastTimeViewedService = new GQLCustomSchema('TicketLastTimeViewedService', {
    types: [
        {
            access: true,
            type: TicketLastTimeViewedType,
        },
        {
            access: true,
            type: TicketLastTimeViewedCreateInput,
        },
        {
            access: true,
            type: TicketLastTimeViewedUpdateInput,
        },
        {
            access: true,
            type: TicketLastTimeViewedWhereInput,
        },
        {
            access: true,
            type: SortTicketsLastTimeViewedByEnum,
        },
    ],
    mutations: [
        {
            access: access.canUpdateTicketLastTimeViewed,
            schema: updateTicketLastTimeViewedMutation,
            resolver: async (parent, args, context, info, extra = {}) => {
                const data = get(args, ['data', 'viewedAt'])
                if (typeof data !== 'string') {
                    throw new Error('Wrong date')
                }
                const dateObj = new Date(data)
                if (!isValidDate(dateObj)) {
                    throw new Error('Wrong date')
                }
                await store.set(getDSKey(context.authedItem.id), dateObj.toISOString())
                return { id: context.authedItem.id, lastTimeViewed: dateObj }
            },
        },
        {
            access: access.canDeleteTicketLastTimeViewed,
            schema: deleteTicketLastTimeViewedMutation,
            resolver: async (parent, args, context, info, extra = {}) => {
                const id = get(args, ['data', 'id'])
                // await store.set(getDSKey(context.authedItem.id), dateObj.toISOString())
                // return { id: context.authedItem.id, lastTimeViewed: dateObj }
            },
        },
    ],
    queries: [
        {
            access: access.canGetAllTicketsLastTimeViewed,
            schema: allTicketsLastTimeViewedQuery,
            resolver: async (parent, args, context, info, extra = {}) => {
                let lastTimeViewed = await store.get(getDSKey(context.authedItem.id))
                const dateObj = new Date(lastTimeViewed)
                if (!lastTimeViewed || !isValidDate(dateObj)) {
                    const now = new Date().toISOString()
                    await store.set(getDSKey(context.authedItem.id), now)
                    lastTimeViewed = now
                }
                return [{ id: context.authedItem.id, lastTimeViewed }]
            },
        },
    ],
})

module.exports = {
    TicketLastTimeViewedService,
}