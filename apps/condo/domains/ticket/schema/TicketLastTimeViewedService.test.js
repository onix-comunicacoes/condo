/**
 * Generated by `createservice ticket.TicketLastTimeViewedService`
 */
const dayjs = require('dayjs')
const { makeLoggedInClient } = require('@core/keystone/test.utils')
const { setTicketLastTimeViewedByTestClient, getTicketLastTimeViewedByTestClient } = require('@condo/domains/ticket/utils/testSchema')
const { catchErrorFrom } = require('@condo/domains/common/utils/testSchema')
  
describe('TicketLastTimeViewedService', () => {
    beforeEach(async () => {
        const client = await makeLoggedInClient()
        setTicketLastTimeViewedByTestClient(client, { viewedAt: 0 })
    })
    test('Returns 0 at first time', async () => {
        const client = await makeLoggedInClient()
        const [{ syncedTicketLastTimeViewed }] = await getTicketLastTimeViewedByTestClient(client)
        expect(syncedTicketLastTimeViewed).toEqual(0)
    })
    test('set ticket last time viewed', async () => {
        const client = await makeLoggedInClient()
        const start = dayjs().unix()
        await setTicketLastTimeViewedByTestClient(client, { viewedAt: start })
        const [{ syncedTicketLastTimeViewed }] = await getTicketLastTimeViewedByTestClient(client)
        expect(syncedTicketLastTimeViewed).toEqual(start)
    })
 
    const invalidUnixTimes = [-500, 0.003, 0.2 + 0.4]
    test.each(invalidUnixTimes)('Not setting invalid unix time', async (invalidUnixTime) => {
        const client = await makeLoggedInClient()
        const [{ status }] = await setTicketLastTimeViewedByTestClient(client, { viewedAt: invalidUnixTime })
        expect(status).toEqual('Wrong date')
        const [{ syncedTicketLastTimeViewed }] = await getTicketLastTimeViewedByTestClient(client)
        expect(syncedTicketLastTimeViewed).toEqual(0)    
    })
     
    const invalidDates = [NaN, Infinity, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY, 'wrong date', {}]
    test.each(invalidDates)('Not setting invalid date', async (invalidDate) => {
        const client = await makeLoggedInClient()
        await catchErrorFrom(async () => {
            await setTicketLastTimeViewedByTestClient(client, { viewedAt: invalidDate })
        }, ({ errors }) => {
            expect(errors[0]).toMatchObject({
                message: expect.stringContaining('Variable "$data" got invalid value'),
                name: 'UserInputError',
            })
        })
        const [{ syncedTicketLastTimeViewed }] = await getTicketLastTimeViewedByTestClient(client)
        expect(syncedTicketLastTimeViewed).toEqual(0)    
    })
})