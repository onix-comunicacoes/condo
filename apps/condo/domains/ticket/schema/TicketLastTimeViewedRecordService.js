/**
 * Generated by `createservice ticket.TicketLastTimeViewedRecordService`
 */

const { GQLCustomSchema } = require('@core/keystone/schema')
const access = require('@condo/domains/ticket/access/TicketLastTimeViewedRecordService')
const REDIS_URL = require('@core/config').REDIS_URL
const IORedis = require('ioredis')
const { get } = require('lodash')
const { isValidDate } = require('@core/keystone/plugins/utils')
const { 
    TicketLastTimeViewedRecordType, 
    TicketLastTimeViewedRecordCreateInput, 
    TicketLastTimeViewedRecordUpdateInput,
    TicketLastTimeViewedRecordWhereInput,
    SortTicketLastTimeViewedRecordsByEnum,
    updateTicketLastTimeViewedRecordMutation, 
    deleteTicketLastTimeViewedRecordMutation,
    allTicketLastTimeViewedRecordsQuery, 
} = require('@condo/domains/ticket/gql')

const store = new IORedis(REDIS_URL)
const TICKET_LAST_TIME_VIEWED_BY_USER_PREFIX = 'ticketLastTimeViewedRecordByUser-'
const getDSKey = (id) => TICKET_LAST_TIME_VIEWED_BY_USER_PREFIX + id

const TicketLastTimeViewedRecordService = new GQLCustomSchema('TicketLastTimeViewedRecordService', {
    types: [
        {
            access: true,
            type: TicketLastTimeViewedRecordType,
        },
        {
            access: true,
            type: TicketLastTimeViewedRecordCreateInput,
        },
        {
            access: true,
            type: TicketLastTimeViewedRecordUpdateInput,
        },
        {
            access: true,
            type: TicketLastTimeViewedRecordWhereInput,
        },
        {
            access: true,
            type: SortTicketLastTimeViewedRecordsByEnum,
        },
    ],
    mutations: [
        {
            access: access.canUpdateTicketLastTimeViewedRecord,
            schema: updateTicketLastTimeViewedRecordMutation,
            resolver: async (parent, args, context, info, extra = {}) => {
                const data = get(args, ['data', 'lastTimeViewed'])
                if (typeof data !== 'string') {
                    throw new Error('Wrong date')
                }
                const dateObj = new Date(data)
                if (!isValidDate(dateObj) || dateObj.getTime() < new Date().getTime() - 1000 * 5) {
                    throw new Error('Wrong date')
                }
                await store.set(getDSKey(context.authedItem.id), dateObj.toISOString())
                return { id: context.authedItem.id, lastTimeViewed: dateObj }
            },
        },
        {
            access: access.canDeleteTicketLastTimeViewedRecord,
            schema: deleteTicketLastTimeViewedRecordMutation,
            resolver: async (parent, args, context, info, extra = {}) => {
                const id = get(args, ['data', 'id'])
                const key = getDSKey(context.authedItem.id)
                const ticketLastTimeViewed = await store.get(id)
                if (ticketLastTimeViewed) {
                    await store.del(key)
                    return { id: context.authedItem.id, lastTimeViewed: ticketLastTimeViewed }
                }
                return null
            },
        },
    ],
    queries: [
        {
            access: access.canGetAllTicketLastTimeViewedRecord,
            schema: allTicketLastTimeViewedRecordsQuery,
            resolver: async (parent, args, context, info, extra = {}) => {
                let lastTimeViewed = await store.get(getDSKey(context.authedItem.id))
                const dateObj = new Date(lastTimeViewed)
                if (!lastTimeViewed || !isValidDate(dateObj)) {
                    const now = new Date().toISOString()
                    await store.set(getDSKey(context.authedItem.id), now)
                    lastTimeViewed = now
                }
                return [{ id: context.authedItem.id, lastTimeViewed }]
            },
        },
    ],
})

module.exports = {
    TicketLastTimeViewedRecordService,
}