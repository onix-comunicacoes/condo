/**
 * Generated by `createschema billing.BillingRecipient 'organization:Relationship:Organization:CASCADE; tin:Text; iec:Text; bic:Text; context?:Relationship:BillingIntegrationOrganizationContext:SET_NULL; bankAccount:Text; name?:Text; approved:Checkbox; meta?:Json;'`
 */

const { Text, Relationship, Integer, Select, Checkbox, DateTimeUtc, CalendarDay, Decimal, Password, File } = require('@keystonejs/fields')
const { Json } = require('@core/keystone/fields')
const { GQLListSchema } = require('@core/keystone/schema')
const { historical, versioned, uuided, tracked, softDeleted } = require('@core/keystone/plugins')
const { SENDER_FIELD, DV_FIELD } = require('@condo/domains/common/schema/fields')
const access = require('@condo/domains/billing/access/BillingRecipient')


const BillingRecipient = new GQLListSchema('BillingRecipient', {
    // TODO(codegen): write doc for the BillingRecipient domain model!
    schemaDoc: 'TODO DOC!',
    fields: {
        dv: DV_FIELD,
        sender: SENDER_FIELD,

        organization: {
            // TODO(codegen): write doc for BillingRecipient.organization field!
            schemaDoc: 'TODO DOC!',
            type: Relationship,
            ref: 'Organization',
            isRequired: true,
            knexOptions: { isNotNullable: true }, // Required relationship only!
            kmigratorOptions: { null: false, on_delete: 'models.CASCADE' },
        },

        tin: {
            // TODO(codegen): write doc for BillingRecipient.tin field!
            schemaDoc: 'TODO DOC!',
            type: Text,
            isRequired: true,
        },

        iec: {
            // TODO(codegen): write doc for BillingRecipient.iec field!
            schemaDoc: 'TODO DOC!',
            type: Text,
            isRequired: true,
        },

        bic: {
            // TODO(codegen): write doc for BillingRecipient.bic field!
            schemaDoc: 'TODO DOC!',
            type: Text,
            isRequired: true,
        },

        context: {
            // TODO(codegen): write doc for BillingRecipient.context field!
            schemaDoc: 'TODO DOC!',
            type: Relationship,
            ref: 'BillingIntegrationOrganizationContext',
            kmigratorOptions: { null: true, on_delete: 'models.SET_NULL' },
        },

        bankAccount: {
            // TODO(codegen): write doc for BillingRecipient.bankAccount field!
            schemaDoc: 'TODO DOC!',
            type: Text,
            isRequired: true,
        },

        name: {
            // TODO(codegen): write doc for BillingRecipient.name field!
            schemaDoc: 'TODO DOC!',
            type: Text,
        },

        approved: {
            // TODO(codegen): write doc for BillingRecipient.approved field!
            schemaDoc: 'TODO DOC!',
            type: Checkbox,
            isRequired: true,
        },

        meta: {
            // TODO(codegen): write doc for BillingRecipient.meta field!
            schemaDoc: 'TODO DOC!',
            type: Json,
        },

    },
    plugins: [uuided(), versioned(), tracked(), softDeleted(), historical()],
    access: {
        read: access.canReadBillingRecipients,
        create: access.canManageBillingRecipients,
        update: access.canManageBillingRecipients,
        delete: false,
        auth: true,
    },
})

module.exports = {
    BillingRecipient,
}
