// @ts-nocheck
/**
 * Generated by `createschema billing.BillingRecipient 'organization:Relationship:Organization:CASCADE; tin:Text; iec:Text; bic:Text; context?:Relationship:BillingIntegrationOrganizationContext:SET_NULL; bankAccount:Text; name?:Text; approved:Checkbox; meta?:Json;'`
 */

const { throwAuthenticationError } = require("@condo/domains/common/utils/apolloErrorFormatter")

async function canReadBillingRecipients ({ authentication: { item: user } }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false

    if (user.isAdmin) return {}

    // TODO(codegen): write canReadBillingRecipients logic for user!
    return {}
}

async function canManageBillingRecipients ({ authentication: { item: user }, originalInput, operation, itemId }) {
    if (!user) return throwAuthenticationError()
    if (user.deletedAt) return false
    if (user.isAdmin) return true

    if (operation === 'create') {
        // TODO(codegen): write canManageBillingRecipients create logic!
        return true
    } else if (operation === 'update') {
        // TODO(codegen): write canManageBillingRecipients update logic!
        return true
    }

    return false
}

/*
  Rules are logical functions that used for list access, and may return a boolean (meaning
  all or no items are available) or a set of filters that limit the available items.
*/
module.exports = {
    canReadBillingRecipients,
    canManageBillingRecipients,
}
