/**
 * Generated by `{{ command }}`
 */

import { pick, get, map, difference } from 'lodash'

import { getClientSideSenderInfo } from '@{{app}}/domains/common/utils/userid.utils'
import { generateReactHooks } from '@{{app}}/domains/common/utils/codegeneration/generate.hooks'

import { {{ name }} as {{ name }}GQL } from '@{{app}}/domains/{{ domain }}/gql'
import { {{ name }}, {{ name }}UpdateInput, QueryAll{{ pluralize.plural(name) }}Args } from '../../../../schema'

const FIELDS = ['id', 'deletedAt', 'createdAt', 'updatedAt', 'createdBy', 'updatedBy'{% for field in signature %}, '{{ field.name }}'{% endfor %}]
const RELATIONS = [{% for field in signature | selectattr("isRelation") %}'{{ field.name }}'{% if not loop.last %}, {% endif %}{% endfor %}]

export interface I{{ name }}UIState extends {{ name }} {
    id: string
    // TODO(codegen): write I{{ name }}UIState or extends it from
}

function convertToUIState (item: {{ name }}): I{{ name }}UIState {
    if (item.dv !== 1) throw new Error('unsupported item.dv')
    return pick(item, FIELDS) as I{{ name }}UIState
}

export interface I{{ name }}FormState {
    id?: undefined
    // TODO(codegen): write I{{ name }}UIFormState or extends it from
}

function convertToUIFormState (state: I{{ name }}UIState): I{{ name }}FormState | undefined {
    if (!state) return
    const result = {}
    for (const attr of Object.keys(state)) {
        const attrId = get(state[attr], 'id')
        result[attr] = (RELATIONS.includes(attr) && state[attr]) ? attrId || state[attr] : state[attr]
    }
    return result as I{{ name }}FormState
}

function convertToGQLInput (state: I{{ name }}FormState, obj: I{{ name }}UIState, initialState: I{{ name }}FormState): {{ name }}UpdateInput {
    const sender = getClientSideSenderInfo()
    const result = { dv: 1, sender }
    for (const attr of Object.keys(state)) {
        if (RELATIONS.includes(attr)) {
            if (Array.isArray(state[attr])) {
                const newIds = map(state[attr], item => get(item, 'id') || item)
                const oldIds = map(initialState[attr], item => get(item, 'id') || item)
                const changes = {}
                const idsToConnect = difference(newIds, oldIds)
                if (idsToConnect.length > 0) {
                    changes.connect = map(idsToConnect, id => ({ id }))
                }
                const idsToDisconnect = difference(oldIds, newIds)
                if (idsToDisconnect.length > 0) {
                    changes.disconnect = map(idsToDisconnect, id => ({ id }))
                }
                if (Object.keys(changes).length > 0) {
                    result[attr] = changes
                }
            } else {
                const newAttrId = get(state[attr], 'id') || state[attr]
                const oldAttrId = get(initialState[attr], 'id') || initialState[attr]
                if (newAttrId && oldAttrId && newAttrId !== oldAttrId) {
                    result[attr] = { connect: { id: newAttrId } }
                } else if (!newAttrId) {
                    result[attr] = { disconnectAll: true }
                }
            }
        } else {
            result[attr] = state[attr]
        }
    }
    return result
}

const {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useDelete,
} = generateReactHooks<{{ name }}, {{ name }}UpdateInput, I{{ name }}FormState, I{{ name }}UIState, QueryAll{{ pluralize.plural(name) }}Args>({{ name }}GQL, { convertToGQLInput, convertToUIState })

export {
    useObject,
    useObjects,
    useCreate,
    useUpdate,
    useDelete,
    convertToUIFormState,
}
